--- a/chrome/browser/helium_flag_choices.h
+++ b/chrome/browser/helium_flag_choices.h
@@ -11,6 +11,15 @@
 namespace helium {
   using namespace ::helium;
 
+  constexpr const char kEnergySaverFrameRateCommandLine[] = "energy-saver-fps-limit";
+  constexpr const FeatureEntry::Choice kEnergySaverFrameRateChoices[] = {
+    {flags_ui::kGenericExperimentChoiceAutomatic, "", ""},
+    {"30", kEnergySaverFrameRateCommandLine, "30"},
+    {"60", kEnergySaverFrameRateCommandLine, "60"},
+    {"120", kEnergySaverFrameRateCommandLine, "120"},
+    {"Disabled", kEnergySaverFrameRateCommandLine, "9001"},
+  };
+
 }  // namespace helium
 
 #endif  /* CHROME_BROWSER_HELIUM_FLAG_CHOICES_H_ */
--- a/chrome/browser/helium_flag_entries.h
+++ b/chrome/browser/helium_flag_entries.h
@@ -4,4 +4,8 @@
 
 #ifndef CHROME_BROWSER_HELIUM_FLAG_ENTRIES_H_
 #define CHROME_BROWSER_HELIUM_FLAG_ENTRIES_H_
+    {helium::kEnergySaverFrameRateCommandLine,
+     "Maximum frame rate for Energy Saver",
+     "Configures the frame rate the browser is throttled to when Energy Saver is enabled. Helium flag.",
+     kOsDesktop, MULTI_VALUE_TYPE(helium::kEnergySaverFrameRateChoices)},
 #endif  /* CHROME_BROWSER_HELIUM_FLAG_ENTRIES_H_ */
--- a/chrome/browser/performance_manager/user_tuning/battery_saver_mode_manager.cc
+++ b/chrome/browser/performance_manager/user_tuning/battery_saver_mode_manager.cc
@@ -20,6 +20,7 @@
 #include "base/power_monitor/power_observer.h"
 #include "base/run_loop.h"
 #include "base/scoped_multi_source_observation.h"
+#include "base/strings/string_number_conversions.h"
 #include "base/values.h"
 #include "components/performance_manager/freezing/freezing_policy.h"
 #include "components/performance_manager/performance_manager_impl.h"
@@ -68,12 +69,28 @@ constexpr int kBatterySaverModeThreshold
 constexpr int kBatterySaverModeThresholdAdjustmentForDisplayLevel = 0;
 #endif  // BUILDFLAG(IS_CHROMEOS)
 
+int GetMaxRate() {
+  auto* command_line = base::CommandLine::ForCurrentProcess();
+  int fps;
+
+  if (command_line->HasSwitch("energy-saver-fps-limit") &&
+      base::StringToInt(command_line->GetSwitchValueASCII(
+        "energy-saver-fps-limit"), &fps) && fps > 0) {
+    return fps;
+  }
+
+  return 30;
+}
+
 class FrameThrottlingDelegateImpl
     : public performance_manager::user_tuning::BatterySaverModeManager::
           FrameThrottlingDelegate {
  public:
   void StartThrottlingAllFrameSinks() override {
-    content::StartThrottlingAllFrameSinks(base::Hertz(30));
+    static int max_rate = GetMaxRate();
+    if (max_rate < 9000) {
+      content::StartThrottlingAllFrameSinks(base::Hertz(max_rate));
+    }
   }
 
   void StopThrottlingAllFrameSinks() override {
