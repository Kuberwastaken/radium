--- a/chrome/browser/ui/ui_features.cc
+++ b/chrome/browser/ui/ui_features.cc
@@ -120,7 +120,7 @@ BASE_FEATURE(KScrimForTabModal,
              "ScrimForTabModal",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
-BASE_FEATURE(kSideBySide, "SideBySide", base::FEATURE_DISABLED_BY_DEFAULT);
+BASE_FEATURE(kSideBySide, "SideBySide", base::FEATURE_ENABLED_BY_DEFAULT);
 
 // The delay before showing the drop target for the side-by-side drag-and-drop
 // entrypoint.
--- a/chrome/browser/ui/views/frame/multi_contents_resize_area.cc
+++ b/chrome/browser/ui/views/frame/multi_contents_resize_area.cc
@@ -22,8 +22,8 @@
 namespace {
 const int kHandleCornerRadius = 2;
 const int kHandleHeight = 24;
-const int kHandlePadding = 6;
-const int kHandleWidth = 4;
+const int kHandlePadding = 4;
+const int kHandleWidth = 2;
 }  // namespace
 
 DEFINE_CLASS_ELEMENT_IDENTIFIER_VALUE(MultiContentsResizeHandle,
--- a/chrome/browser/ui/views/frame/multi_contents_view.h
+++ b/chrome/browser/ui/views/frame/multi_contents_view.h
@@ -24,7 +24,6 @@ class MultiContentsDropTargetView;
 class MultiContentsResizeArea;
 class MultiContentsViewDelegate;
 class MultiContentsViewDropTargetController;
-class MultiContentsViewMiniToolbar;
 
 namespace content {
 class WebContents;
@@ -58,7 +57,7 @@ class MultiContentsView : public views::
     double drop_target_width = 0;
   };
 
-  static constexpr int kSplitViewContentInset = 8;
+  static constexpr int kSplitViewContentInset = 3;
 
   MultiContentsView(BrowserView* browser_view,
                     std::unique_ptr<MultiContentsViewDelegate> delegate);
@@ -157,10 +156,6 @@ class MultiContentsView : public views::
     return contents_container_views_[1]->GetContentsView();
   }
 
-  MultiContentsViewMiniToolbar* mini_toolbar_for_testing(int index) const {
-    return contents_container_views_[index]->GetMiniToolbar();
-  }
-
  private:
   static constexpr int kMinWebContentsWidth = 200;
   static constexpr double kMinWebContentsWidthPercentage = 0.1;
--- a/chrome/browser/resources/tab_search/split_view/app.css
+++ b/chrome/browser/resources/tab_search/split_view/app.css
@@ -50,7 +50,7 @@ picture {
 
 .body {
   align-self: center;
-  color: var(--cr-primary-text-color);
+  color: var(--cr-secondary-text-color);
   font-size: 14px;
   font-weight: 400;
   line-height: 20px;
--- a/chrome/browser/ui/views/frame/multi_contents_view.cc
+++ b/chrome/browser/ui/views/frame/multi_contents_view.cc
@@ -19,7 +19,6 @@
 #include "chrome/browser/ui/views/frame/multi_contents_resize_area.h"
 #include "chrome/browser/ui/views/frame/multi_contents_view_delegate.h"
 #include "chrome/browser/ui/views/frame/multi_contents_view_drop_target_controller.h"
-#include "chrome/browser/ui/views/frame/multi_contents_view_mini_toolbar.h"
 #include "chrome/browser/ui/views/frame/scrim_view.h"
 #include "chrome/browser/ui/views/frame/top_container_background.h"
 #include "chrome/browser/ui/views/new_tab_footer/footer_web_view.h"
--- a/chrome/browser/ui/views/frame/contents_container_view.cc
+++ b/chrome/browser/ui/views/frame/contents_container_view.cc
@@ -14,7 +14,6 @@
 #include "chrome/browser/ui/views/frame/browser_view.h"
 #include "chrome/browser/ui/views/frame/contents_separator.h"
 #include "chrome/browser/ui/views/frame/contents_web_view.h"
-#include "chrome/browser/ui/views/frame/multi_contents_view_mini_toolbar.h"
 #include "chrome/browser/ui/views/frame/scrim_view.h"
 #include "chrome/browser/ui/views/new_tab_footer/footer_web_view.h"
 #include "chrome/common/chrome_features.h"
@@ -30,18 +29,13 @@
 #include "ui/views/layout/proposed_layout.h"
 #include "ui/views/view_class_properties.h"
 
-#if BUILDFLAG(ENABLE_GLIC)
-#include "chrome/browser/glic/browser_ui/glic_border_view.h"
-#include "chrome/browser/glic/glic_enabling.h"
-#endif
-
 namespace {
-constexpr float kContentCornerRadius = 6;
+constexpr float kContentCornerRadius = 8;
 constexpr gfx::RoundedCornersF kContentRoundedCorners{kContentCornerRadius};
 
-constexpr int kContentOutlineCornerRadius = 8;
+constexpr int kContentOutlineCornerRadius = 9;
 constexpr int kContentOutlineThickness = 1;
-constexpr int kSplitViewContentPadding = 4;
+constexpr int kSplitViewContentPadding = 0;
 
 constexpr int kNewTabFooterSeparatorHeight = 1;
 constexpr int kNewTabFooterHeight = 56;
@@ -78,31 +72,6 @@ ContentsContainerView::ContentsContainer
         AddChildView(std::make_unique<ScrimView>(kColorSplitViewScrim));
     inactive_split_scrim_view_->SetRoundedCorners(kContentRoundedCorners);
   }
-
-  if (features::kGlicActorUiOverlay.Get()) {
-    auto actor_overlay_view = std::make_unique<views::View>();
-    actor_overlay_view->SetID(VIEW_ID_ACTOR_OVERLAY);
-    actor_overlay_view->SetVisible(false);
-    actor_overlay_view->SetLayoutManager(std::make_unique<views::FillLayout>());
-    actor_overlay_view_ = AddChildView(std::move(actor_overlay_view));
-  }
-
-#if BUILDFLAG(ENABLE_GLIC)
-  if (glic::GlicEnabling::IsProfileEligible(browser_view->GetProfile())) {
-    glic_border_ =
-        AddChildView(views::Builder<glic::GlicBorderView>(
-                         glic::GlicBorderView::Factory::Create(
-                             browser_view->browser(), contents_view_))
-                         .SetVisible(false)
-                         .SetCanProcessEventsWithinSubtree(false)
-                         .Build());
-  }
-#endif
-
-  if (base::FeatureList::IsEnabled(features::kSideBySide)) {
-    mini_toolbar_ = AddChildView(std::make_unique<MultiContentsViewMiniToolbar>(
-        browser_view, contents_view_));
-  }
 }
 
 void ContentsContainerView::UpdateBorderAndOverlay(bool is_in_split,
@@ -114,7 +83,6 @@ void ContentsContainerView::UpdateBorder
   if (!is_in_split) {
     SetBorder(nullptr);
     ClearBorderRoundedCorners();
-    mini_toolbar_->SetVisible(false);
     inactive_split_scrim_view_->SetVisible(false);
     return;
   }
@@ -133,9 +101,6 @@ void ContentsContainerView::UpdateBorder
 
   UpdateBorderRoundedCorners();
 
-  // Mini toolbar should only be visible for the inactive contents
-  // container view or both depending on configuration.
-  mini_toolbar_->UpdateState(is_active);
   // Scrim should only be allowed to show the scrim for inactive contents
   // container view.
   inactive_split_scrim_view_->SetVisible(!is_active && show_scrim);
@@ -220,13 +185,6 @@ views::ProposedLayout ContentsContainerV
   layouts.child_layouts.emplace_back(
       contents_view_.get(), contents_view_->GetVisible(), contents_rect);
 
-#if BUILDFLAG(ENABLE_GLIC)
-  if (glic_border_) {
-    layouts.child_layouts.emplace_back(
-        glic_border_.get(), glic_border_->GetVisible(), contents_bounds);
-  }
-#endif
-
   // The scrim view should cover the entire contents bounds.
   CHECK(contents_scrim_view_);
   layouts.child_layouts.emplace_back(contents_scrim_view_.get(),
@@ -240,29 +198,6 @@ views::ProposedLayout ContentsContainerV
                                        contents_bounds);
   }
 
-  // Actor Overlay view bounds are the same as the contents view.
-  if (actor_overlay_view_) {
-    layouts.child_layouts.emplace_back(actor_overlay_view_.get(),
-                                       actor_overlay_view_->GetVisible(),
-                                       contents_rect, size_bounds);
-  }
-
-  if (mini_toolbar_) {
-    // |mini_toolbar_| should be offset in the bottom right corner, overlapping
-    // the outline.
-    gfx::Size mini_toolbar_size = mini_toolbar_->GetPreferredSize(
-        views::SizeBounds(width - kContentOutlineCornerRadius, height));
-    const int offset_x =
-        width - mini_toolbar_size.width() + (kContentOutlineThickness / 2.0f);
-    const int offset_y =
-        height - mini_toolbar_size.height() + (kContentOutlineThickness / 2.0f);
-    const gfx::Rect mini_toolbar_rect =
-        gfx::Rect(offset_x, offset_y, mini_toolbar_size.width(),
-                  mini_toolbar_size.height());
-    layouts.child_layouts.emplace_back(
-        mini_toolbar_.get(), mini_toolbar_->GetVisible(), mini_toolbar_rect);
-  }
-
   layouts.host_size = gfx::Size(width, height);
   return layouts;
 }
--- a/chrome/browser/ui/views/frame/contents_container_view.h
+++ b/chrome/browser/ui/views/frame/contents_container_view.h
@@ -11,13 +11,8 @@
 
 class BrowserView;
 class ContentsWebView;
-class MultiContentsViewMiniToolbar;
 class ScrimView;
 
-namespace glic {
-class GlicBorderView;
-}  // namespace glic
-
 namespace new_tab_footer {
 class NewTabFooterWebView;
 }  // namespace new_tab_footer
@@ -33,10 +28,7 @@ class ContentsContainerView : public vie
   ~ContentsContainerView() override = default;
 
   ContentsWebView* GetContentsView() { return contents_view_; }
-  MultiContentsViewMiniToolbar* GetMiniToolbar() { return mini_toolbar_; }
   ScrimView* GetContentsScrimView() { return contents_scrim_view_; }
-  views::View* GetActorOverlayView() { return actor_overlay_view_; }
-  glic::GlicBorderView* GetGlicBorderView() { return glic_border_; }
   new_tab_footer::NewTabFooterWebView* GetNewTabFooterView() {
     return new_tab_footer_view_;
   }
@@ -74,15 +66,6 @@ class ContentsContainerView : public vie
   // Scrim view shown on the inactive side of a split view when the omnibox is
   // focused or site permissions dialogs are showing.
   raw_ptr<ScrimView> inactive_split_scrim_view_ = nullptr;
-
-  // The view that contains the Glic Actor Overlay. The Actor Overlay is a UI
-  // overlay that is shown on top of the web contents.
-  raw_ptr<views::View> actor_overlay_view_ = nullptr;
-
-  // The glic browser view that renders around the web contents area.
-  raw_ptr<glic::GlicBorderView> glic_border_ = nullptr;
-
-  raw_ptr<MultiContentsViewMiniToolbar> mini_toolbar_ = nullptr;
 };
 
 #endif  // CHROME_BROWSER_UI_VIEWS_FRAME_CONTENTS_CONTAINER_VIEW_H_
--- a/chrome/browser/ui/browser_window/internal/browser_window_features.cc
+++ b/chrome/browser/ui/browser_window/internal/browser_window_features.cc
@@ -493,26 +493,6 @@ void BrowserWindowFeatures::InitPostBrow
   // The controller relies on performance manager which isn't initialized in
   // some unit tests without browser view.
   if (browser_view->GetIsNormalType()) {
-#if BUILDFLAG(ENABLE_GLIC)
-    glic::GlicKeyedService* glic_service =
-        glic::GlicKeyedService::Get(browser_view->GetProfile());
-    if (glic_service) {
-      glic_button_controller_ = std::make_unique<glic::GlicButtonController>(
-          browser_view->GetProfile(),
-          browser_view->tab_strip_region_view()->GetTabStripActionContainer(),
-          glic_service);
-
-      if (features::kGlicActorUiTaskIcon.Get() &&
-          browser_->GetProfile()->IsRegularProfile()) {
-        glic_actor_task_icon_controller_ =
-            std::make_unique<tabs::GlicActorTaskIconController>(
-                browser_->GetProfile(), browser_view->tab_strip_region_view()
-                                            ->GetTabStripActionContainer());
-      }
-    }
-
-#endif  // BUILDFLAG(ENABLE_GLIC)
-
     memory_saver_opt_in_iph_controller_ =
         std::make_unique<MemorySaverOptInIPHController>(
             browser_view->browser());
@@ -522,14 +502,6 @@ void BrowserWindowFeatures::InitPostBrow
           std::make_unique<media_router::CastBrowserController>(
               browser_view->browser());
     }
-
-    if (features::kGlicActorUiOverlay.Get()) {
-      // TODO(crbug.com/433999185): Handle split view.
-      actor_overlay_window_controller_ =
-          std::make_unique<actor::ui::ActorOverlayWindowController>(
-              browser_view->GetActiveContentsContainerView()
-                  ->GetActorOverlayView());
-    }
   }
 
 #if !BUILDFLAG(IS_CHROMEOS)
